# -*- coding: utf-8 -*-
"""Copy of AMAZAN_PRODUCT_SIZE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rdxaTcEd_iZuLVVkxdELguuDShn3hDNZ

#GOOGLE MOUNTING
"""

from google.colab import drive
drive.mount('/content/drive')

"""#IMPORTING LIBRARIES"""

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_percentage_error
import numpy as np
from sklearn import metrics
from sklearn.metrics import accuracy_score
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

"""#LOADING THE TRAINTING AND THE TESTING DATA SETS"""

a = pd.read_csv('/content/drive/MyDrive/train.csv')

train_df=a.drop(["TITLE","BULLET_POINTS","DESCRIPTION"],axis=1)

print(train_df)

b = pd.read_csv('/content/drive/MyDrive/train.csv')

test_df=b.drop(["TITLE","BULLET_POINTS","DESCRIPTION"],axis=1)

print(test_df)

"""
# Prepare the data for training and testing"""

X_train = train_df.drop(['PRODUCT_ID', 'PRODUCT_LENGTH'], axis=1)
X_train = X_train.fillna('') 
y_train = train_df['PRODUCT_LENGTH']

"""# Split the training data into training and validation sets"""

X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

"""# Define preprocessing steps for each column"""

text_transformer = Pipeline(steps=[
    ('vectorizer', CountVectorizer(stop_words='english'))
])
cat_transformer = Pipeline(steps=[
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer(
    transformers=[
        
      
        ('product_type', cat_transformer, ['PRODUCT_TYPE_ID']),
    ])

"""# Define the model"""

model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
])

model = LinearRegression()

# Train the machine learning model
model.fit(X_train, y_train)

"""# Predict on the validation set and evaluate the model"""

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
score = max( 0 , 100*(1-metrics.mean_absolute_percentage_error(y_test, y_pred)))
print("Mean Squared Error:", mse)
print("Mean Absolute Error:", mae)
print("R-squared:", r2)
print(score)

"""
# Predict on the test set"""

X_test = test_df.drop(['PRODUCT_ID','PRODUCT_LENGTH'], axis=1)
X_test = X_test.fillna('') 
print(X_test)
y_test_pred = model.predict(X_test)

"""# Prepare the submission file

"""

submission_df = pd.DataFrame({'PRODUCT_ID': test_df['PRODUCT_ID'], 'PRODUCT_LENGTH': y_test_pred})
submission_df.to_csv('/content/drive/MyDrive/sample_submission.csv', index=False)